// This is your Prisma schema file for POS system
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models from zbase system
model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String
  name              String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  userRoles         UserRole[]
  managedWarehouses Warehouse[]
  invoices          Invoice[]
  shifts            Shift[]
  inventoryActions  InventoryTransaction[]

  @@map("users")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  userRoles   UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int          @id @default(autoincrement())
  action      String       @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId    Int     @map("user_id")
  roleId    Int     @map("role_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// POS system models
model Warehouse {
  id            Int       @id @default(autoincrement())
  name          String
  address       String?
  managerId     Int?      @map("manager_id")
  manager       User?     @relation(fields: [managerId], references: [id])
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  inventory     Inventory[]
  invoices      Invoice[]
  inventoryTransactions InventoryTransaction[]

  @@map("warehouses")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]

  @@map("categories")
}

model Product {
  id            Int       @id @default(autoincrement())
  code          String    @unique
  name          String
  categoryId    Int?      @map("category_id")
  category      Category? @relation(fields: [categoryId], references: [id])
  price         Decimal   @db.Decimal(10, 2)
  attributes    Json?
  createdAt     DateTime  @default(now()) @map("created_at")
  inventory     Inventory[]
  invoiceDetails InvoiceDetail[]
  warranties    Warranty[]
  inventoryTransactions InventoryTransaction[]

  @@map("products")
}

model Inventory {
  id            Int       @id @default(autoincrement())
  productId     Int       @map("product_id")
  warehouseId   Int       @map("warehouse_id")
  quantity      Int
  lastUpdated   DateTime  @default(now()) @map("last_updated")
  product       Product   @relation(fields: [productId], references: [id])
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
  @@map("inventory")
}

model Customer {
  id            Int       @id @default(autoincrement())
  name          String
  phone         String?
  email         String?   @unique
  address       String?
  debt          Decimal   @default(0) @db.Decimal(10, 2)
  createdAt     DateTime  @default(now()) @map("created_at")
  invoices      Invoice[]
  warranties    Warranty[]
  transactions  Transaction[]

  @@map("customers")
}

model Partner {
  id            Int       @id @default(autoincrement())
  name          String
  type          PartnerType
  contact       Json?
  debt          Decimal   @default(0) @db.Decimal(10, 2)
  createdAt     DateTime  @default(now()) @map("created_at")
  transactions  Transaction[]

  @@map("partners")
}

enum PartnerType {
  SUPPLIER
  WHOLESALER
}

model Invoice {
  id            Int       @id @default(autoincrement())
  customerId    Int?      @map("customer_id")
  warehouseId   Int       @map("warehouse_id")
  employeeId    Int       @map("employee_id")
  totalAmount   Decimal   @map("total_amount") @db.Decimal(10, 2)
  status        InvoiceStatus @default(PENDING)
  createdAt     DateTime  @default(now()) @map("created_at")
  
  customer      Customer? @relation(fields: [customerId], references: [id])
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  employee      User      @relation(fields: [employeeId], references: [id])
  
  invoiceDetails InvoiceDetail[]
  warranties    Warranty[]

  @@map("invoices")
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

model InvoiceDetail {
  id            Int       @id @default(autoincrement())
  invoiceId     Int       @map("invoice_id")
  productId     Int       @map("product_id")
  quantity      Int
  unitPrice     Decimal   @map("unit_price") @db.Decimal(10, 2)
  discount      Decimal   @default(0) @db.Decimal(10, 2)
  
  invoice       Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product       Product   @relation(fields: [productId], references: [id])

  @@map("invoice_details")
}

model Transaction {
  id            Int       @id @default(autoincrement())
  type          TransactionType
  customerId    Int?      @map("customer_id")
  partnerId     Int?      @map("partner_id")
  amount        Decimal   @db.Decimal(10, 2)
  description   String?
  createdAt     DateTime  @default(now()) @map("created_at")
  
  customer      Customer? @relation(fields: [customerId], references: [id])
  partner       Partner?  @relation(fields: [partnerId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  RECEIPT   // Thu tiền từ khách hàng
  PAYMENT   // Chi tiền cho đối tác
}

model Warranty {
  id            Int       @id @default(autoincrement())
  invoiceId     Int       @map("invoice_id")
  productId     Int       @map("product_id")
  customerId    Int       @map("customer_id")
  startDate     DateTime  @map("start_date")
  endDate       DateTime  @map("end_date") 
  status        WarrantyStatus
  
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
  customer      Customer  @relation(fields: [customerId], references: [id])

  @@map("warranties")
}

enum WarrantyStatus {
  ACTIVE
  EXPIRED
  PROCESSED
}

model Shift {
  id            Int       @id @default(autoincrement())
  employeeId    Int       @map("employee_id")
  startTime     DateTime  @map("start_time")
  endTime       DateTime? @map("end_time")
  initialCash   Decimal   @map("initial_cash") @db.Decimal(10, 2)
  finalCash     Decimal?  @map("final_cash") @db.Decimal(10, 2)
  revenue       Decimal?  @db.Decimal(10, 2)
  
  employee      User      @relation(fields: [employeeId], references: [id])

  @@map("shifts")
}

model InventoryTransaction {
  id            Int       @id @default(autoincrement())
  type          InventoryTransactionType
  productId     Int       @map("product_id")
  warehouseId   Int       @map("warehouse_id")
  quantity      Int
  employeeId    Int       @map("employee_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  product       Product   @relation(fields: [productId], references: [id])
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  employee      User      @relation(fields: [employeeId], references: [id])

  @@map("inventory_transactions")
}

enum InventoryTransactionType {
  IMPORT
  EXPORT
}
