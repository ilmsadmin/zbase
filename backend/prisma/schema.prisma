// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Người dùng hệ thống
model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  password              String
  name                  String
  role                  Role?                  @relation(fields: [roleId], references: [id])
  roleId                Int?
  userRoles             UserRole[]
  posts                 Post[]
  comments              Comment[]
  managedWarehouses     Warehouse[]            @relation("WarehouseManager")
  invoices              Invoice[]
  shifts                Shift[]
  createdWarranties     Warranty[]             @relation("WarrantyCreator")
  handledWarranties     Warranty[]             @relation("WarrantyTechnician")
  transactions          Transaction[]
  inventoryTransactions InventoryTransaction[]
  reportTemplates       ReportTemplate[]
  invoiceTemplates      InvoiceTemplate[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

// Vai trò người dùng
model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  users           User[]
  userRoles       UserRole[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
}

// Quyền hạn
model Permission {
  id              Int              @id @default(autoincrement())
  action          String           @unique
  description     String?
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
}

// Quan hệ nhiều-nhiều giữa vai trò và quyền hạn
model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  createdAt    DateTime   @default(now())

  @@unique([roleId, permissionId])
}

// Quan hệ nhiều-nhiều giữa người dùng và vai trò
model UserRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    Int
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
}

// Bài viết
model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Bình luận
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Kho hàng
model Warehouse {
  id                    Int                    @id @default(autoincrement())
  name                  String
  address               String?
  manager               User?                  @relation("WarehouseManager", fields: [managerId], references: [id])
  managerId             Int?
  locations             WarehouseLocation[]
  inventory             Inventory[]
  inventoryTransactions InventoryTransaction[]
  invoices              Invoice[]
  shifts                Shift[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

// Vị trí lưu trữ trong kho
model WarehouseLocation {
  id                    Int                    @id @default(autoincrement())
  warehouse             Warehouse              @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId           Int
  zone                  String
  aisle                 String
  rack                  String
  shelf                 String
  position              String
  description           String?
  status                String                 @default("active") // 'active', 'inactive', 'maintenance'
  maxCapacity           Decimal?               @db.Decimal(10, 2)
  inventory             Inventory[]
  inventoryTransactions InventoryTransaction[]
  invoiceItems          InvoiceItem[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@unique([warehouseId, zone, aisle, rack, shelf, position])
}

// Danh mục sản phẩm
model ProductCategory {
  id        Int               @id @default(autoincrement())
  name      String
  parent    ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId  Int?
  children  ProductCategory[] @relation("CategoryHierarchy")
  products  Product[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

// Sản phẩm
model Product {
  id                    Int                    @id @default(autoincrement())
  code                  String                 @unique
  name                  String
  description           String?
  category              ProductCategory?       @relation(fields: [categoryId], references: [id])
  categoryId            Int?
  basePrice             Decimal                @db.Decimal(15, 2)
  costPrice             Decimal?               @db.Decimal(15, 2)
  taxRate               Decimal                @default(0) @db.Decimal(5, 2)
  barcode               String?
  unit                  String?
  manufacturer          String?
  warrantyMonths        Int                    @default(0)
  attributes            ProductAttribute[]
  inventory             Inventory[]
  inventoryTransactions InventoryTransaction[]
  invoiceItems          InvoiceItem[]
  priceListItems        PriceListItem[]
  warranties            Warranty[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

// Thuộc tính sản phẩm
model ProductAttribute {
  id             Int      @id @default(autoincrement())
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
  attributeName  String
  attributeValue String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([productId])
}

// Nhóm khách hàng
model CustomerGroup {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  discountRate Decimal     @default(0) @db.Decimal(5, 2)
  creditLimit  Decimal?    @db.Decimal(15, 2)
  paymentTerms Int? // Số ngày được phép trả chậm
  priority     Int         @default(0)
  customers    Customer[]
  priceLists   PriceList[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Khách hàng
model Customer {
  id            Int            @id @default(autoincrement())
  code          String?        @unique
  name          String
  phone         String?
  email         String?
  address       String?
  group         CustomerGroup? @relation(fields: [groupId], references: [id])
  groupId       Int?
  invoices      Invoice[]
  transactions  Transaction[]
  warranties    Warranty[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Đối tác/nhà cung cấp
model Partner {
  id            Int           @id @default(autoincrement())
  code          String?       @unique
  name          String
  contactPerson String?
  phone         String?
  email         String?
  address       String?
  taxCode       String?
  paymentTerms  Int? // Số ngày trả chậm mặc định
  creditBalance Decimal       @default(0) @db.Decimal(15, 2)
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Ca làm việc
model Shift {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  warehouse    Warehouse     @relation(fields: [warehouseId], references: [id])
  warehouseId  Int
  startTime    DateTime
  endTime      DateTime?
  startAmount  Decimal       @db.Decimal(15, 2)
  endAmount    Decimal?      @db.Decimal(15, 2)
  status       String        @default("open") // 'open', 'closed'
  notes        String?
  invoices     Invoice[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Tồn kho
model Inventory {
  id            Int                @id @default(autoincrement())
  product       Product            @relation(fields: [productId], references: [id])
  productId     Int
  warehouse     Warehouse          @relation(fields: [warehouseId], references: [id])
  warehouseId   Int
  location      WarehouseLocation? @relation(fields: [locationId], references: [id])
  locationId    Int?
  quantity      Decimal            @default(0) @db.Decimal(10, 2)
  minStockLevel Decimal            @default(0) @db.Decimal(10, 2)
  maxStockLevel Decimal?           @db.Decimal(10, 2)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@unique([productId, warehouseId, locationId])
  @@index([warehouseId])
  @@index([productId])
}

// Giao dịch xuất/nhập kho
model InventoryTransaction {
  id              Int                @id @default(autoincrement())
  product         Product            @relation(fields: [productId], references: [id])
  productId       Int
  warehouse       Warehouse          @relation(fields: [warehouseId], references: [id])
  warehouseId     Int
  location        WarehouseLocation? @relation(fields: [locationId], references: [id])
  locationId      Int?
  transactionType String // 'in', 'out', 'transfer', 'adjustment'
  quantity        Decimal            @db.Decimal(10, 2)
  referenceType   String? // 'order', 'return', 'internal', etc.
  referenceId     Int?
  user            User?              @relation(fields: [userId], references: [id])
  userId          Int?
  notes           String?
  createdAt       DateTime           @default(now())

  @@index([productId])
  @@index([warehouseId])
  @@index([referenceType, referenceId])
}

// Hóa đơn
model Invoice {
  id             Int             @id @default(autoincrement())
  code           String          @unique
  customer       Customer?       @relation(fields: [customerId], references: [id])
  customerId     Int?
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  shift          Shift?          @relation(fields: [shiftId], references: [id])
  shiftId        Int?
  warehouse      Warehouse       @relation(fields: [warehouseId], references: [id])
  warehouseId    Int
  invoiceDate    DateTime        @default(now())
  subtotal       Decimal         @db.Decimal(15, 2)
  taxAmount      Decimal         @default(0) @db.Decimal(15, 2)
  discountAmount Decimal         @default(0) @db.Decimal(15, 2)
  totalAmount    Decimal         @db.Decimal(15, 2)
  paidAmount     Decimal         @default(0) @db.Decimal(15, 2)
  paymentMethod  String? // 'cash', 'card', 'bank_transfer', etc.
  status         String          @default("pending") // 'pending', 'paid', 'canceled'
  notes          String?
  items          InvoiceItem[]
  payments       InvoicePayment[]
  transactions   Transaction[]
  warranties     Warranty[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([customerId])
  @@index([userId])
  @@index([shiftId])
  @@index([warehouseId])
}

// Chi tiết hóa đơn
model InvoiceItem {
  id                 Int                @id @default(autoincrement())
  invoice            Invoice            @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId          Int
  product            Product            @relation(fields: [productId], references: [id])
  productId          Int
  quantity           Decimal            @db.Decimal(10, 2)
  unitPrice          Decimal            @db.Decimal(15, 2)
  discountRate       Decimal            @default(0) @db.Decimal(5, 2)
  discountAmount     Decimal            @default(0) @db.Decimal(15, 2)
  taxRate            Decimal            @default(0) @db.Decimal(5, 2)
  taxAmount          Decimal            @default(0) @db.Decimal(15, 2)
  totalAmount        Decimal            @db.Decimal(15, 2)
  location           WarehouseLocation? @relation(fields: [locationId], references: [id])
  locationId         Int?
  serialNumbers      String? // Có thể lưu dưới dạng JSON string hoặc array
  serialNumber       String? // Số serial riêng
  warrantyExpiration DateTime?
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([invoiceId])
  @@index([productId])
  @@index([locationId])
}

// Thanh toán hóa đơn
model InvoicePayment {
  id              Int      @id @default(autoincrement())
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId       Int
  amount          Decimal  @db.Decimal(15, 2)
  paymentMethod   String // 'cash', 'card', 'bank_transfer', etc.
  referenceNumber String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([invoiceId])
}

// Bảng giá theo nhóm khách hàng
model PriceList {
  id              Int             @id @default(autoincrement())
  name            String
  code            String          @unique
  description     String?
  customerGroup   CustomerGroup   @relation(fields: [customerGroupId], references: [id])
  customerGroupId Int
  startDate       DateTime?
  endDate         DateTime?
  priority        Int             @default(0) // Ưu tiên cao sẽ được áp dụng trước
  discountType    String          @default("percentage") // 'percentage', 'fixed_amount'
  status          String          @default("active") // 'active', 'inactive', 'expired'
  applicableOn    String          @default("all") // 'all', 'selected_products', 'product_categories'  applyToAll       Boolean           @default(false)
  isDefault       Boolean         @default(false)
  items           PriceListItem[]
  createdBy       Int? // ID người tạo
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([customerGroupId, isDefault], name: "unique_price_list_default_per_customer_group")
  @@index([customerGroupId])
  @@index([status])
}

// Chi tiết giá sản phẩm trong bảng giá
model PriceListItem {
  id                Int       @id @default(autoincrement())
  priceList         PriceList @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  priceListId       Int
  product           Product   @relation(fields: [productId], references: [id])
  productId         Int
  price             Decimal   @db.Decimal(15, 2)
  minQuantity       Decimal   @default(1) @db.Decimal(10, 2)
  maxQuantity       Decimal?  @db.Decimal(10, 2)
  discountType      String    @default("percentage") // 'percentage', 'fixed_amount'
  discountValue     Decimal   @default(0) @db.Decimal(10, 2)
  discountRate      Decimal   @default(0) @db.Decimal(5, 2)
  specialConditions String? // Điều kiện đặc biệt áp dụng (JSON string)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([priceListId, productId, minQuantity])
  @@index([productId])
  @@index([priceListId])
}

// Phiếu thu/chi
model Transaction {
  id                Int       @id @default(autoincrement())
  code              String    @unique
  transactionType   String // 'receipt', 'payment'
  transactionMethod String    @default("cash") // 'cash', 'bank_transfer', 'credit_card', 'e_wallet', etc.
  amount            Decimal   @db.Decimal(15, 2)
  transactionDate   DateTime  @default(now())
  dueDate           DateTime?
  status            String    @default("completed") // 'pending', 'completed', 'canceled', 'failed'
  category          String? // 'sale', 'purchase', 'expense', 'income', 'refund', etc.
  reference         String?
  customer          Customer? @relation(fields: [customerId], references: [id])
  customerId        Int?
  partner           Partner?  @relation(fields: [partnerId], references: [id])
  partnerId         Int?
  invoice           Invoice?  @relation(fields: [invoiceId], references: [id])
  invoiceId         Int?
  referenceType     String? // 'invoice', 'purchase_order', 'expense', etc.
  referenceId       Int?
  user              User      @relation(fields: [userId], references: [id])
  userId            Int
  shift             Shift?    @relation(fields: [shiftId], references: [id])
  shiftId           Int?
  paymentMethod     String? // 'cash', 'bank_transfer', 'credit_card', etc.
  accountNumber     String? // Số tài khoản ngân hàng nếu chuyển khoản
  bankName          String? // Tên ngân hàng nếu chuyển khoản
  receiptNumber     String? // Số chứng từ
  attachments       String? // Đường dẫn đến tệp đính kèm (có thể là JSON string)
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([customerId])
  @@index([partnerId])
  @@index([invoiceId])
  @@index([userId])
  @@index([shiftId])
  @@index([transactionDate])
  @@index([status])
  @@index([category])
  @@index([referenceType, referenceId])
}

// Yêu cầu bảo hành
model Warranty {
  id                 Int       @id @default(autoincrement())
  code               String    @unique
  customer           Customer  @relation(fields: [customerId], references: [id])
  customerId         Int
  product            Product   @relation(fields: [productId], references: [id])
  productId          Int
  invoice            Invoice?  @relation(fields: [invoiceId], references: [id])
  invoiceId          Int?
  serialNumber       String?
  issueDescription   String?
  receivedDate       DateTime  @default(now())
  expectedReturnDate DateTime?
  actualReturnDate   DateTime?
  status             String    @default("pending") // 'pending', 'processing', 'completed', 'rejected'
  diagnosis          String?
  solution           String?
  cost               Decimal   @default(0) @db.Decimal(15, 2)
  charged            Boolean   @default(false)
  notes              String?
  creator            User      @relation("WarrantyCreator", fields: [creatorId], references: [id])
  creatorId          Int
  technician         User?     @relation("WarrantyTechnician", fields: [technicianId], references: [id])
  technicianId       Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([customerId])
  @@index([productId])
  @@index([invoiceId])
  @@index([serialNumber])
}

// Mẫu báo cáo tùy chỉnh
model ReportTemplate {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  reportType    String // 'sales', 'inventory', 'financial', etc.
  queryTemplate String
  parameters    Json?
  createdBy     User     @relation(fields: [createdById], references: [id])
  createdById   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Mẫu hóa đơn
model InvoiceTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  content     String
  type        String // 'default', 'thermal', 'a4', etc.
  isDefault   Boolean  @default(false)
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
