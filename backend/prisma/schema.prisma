generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  password              String
  name                  String
  roleId                Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  comments              Comment[]
  inventoryTransactions InventoryTransaction[]
  invoices              Invoice[]
  invoiceTemplates      InvoiceTemplate[]
  posts                 Post[]
  reportTemplates       ReportTemplate[]
  shifts                Shift[]
  transactions          Transaction[]
  role                  Role?                  @relation(fields: [roleId], references: [id])
  userRoles             UserRole[]
  managedWarehouses     Warehouse[]            @relation("WarehouseManager")
  createdWarranties     Warranty[]             @relation("WarrantyCreator")
  handledWarranties     Warranty[]             @relation("WarrantyTechnician")
  facebookActivities    FacebookActivityLog[]
  facebookComments      FacebookComment[]
  facebookMessages      FacebookMessage[]
  facebookUser          FacebookUser?
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  rolePermissions RolePermission[]
  users           User[]
  userRoles       UserRole[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  action          String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  rolePermissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean   @default(false)
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Warehouse {
  id                    Int                    @id @default(autoincrement())
  name                  String
  address               String?
  managerId             Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  inventory             Inventory[]
  inventoryTransactions InventoryTransaction[]
  invoices              Invoice[]
  shifts                Shift[]
  manager               User?                  @relation("WarehouseManager", fields: [managerId], references: [id])
  locations             WarehouseLocation[]
}

model WarehouseLocation {
  id                    Int                    @id @default(autoincrement())
  warehouseId           Int
  zone                  String
  aisle                 String
  rack                  String
  shelf                 String
  position              String
  description           String?
  status                String                 @default("active")
  maxCapacity           Decimal?               @db.Decimal(10, 2)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  inventory             Inventory[]
  inventoryTransactions InventoryTransaction[]
  invoiceItems          InvoiceItem[]
  warehouse             Warehouse              @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([warehouseId, zone, aisle, rack, shelf, position])
}

model ProductCategory {
  id          Int               @id @default(autoincrement())
  name        String
  parentId    Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  description String?
  products    Product[]
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
}

model Product {
  id                    Int                    @id @default(autoincrement())
  name                  String
  description           String?
  categoryId            Int?
  costPrice             Decimal?               @db.Decimal(15, 2)
  taxRate               Decimal                @default(0) @db.Decimal(5, 2)
  barcode               String?
  unit                  String?
  manufacturer          String?
  warrantyMonths        Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  dimensions            String?
  imageUrl              String?
  isActive              Boolean                @default(true)
  maxStockLevel         Decimal?               @db.Decimal(10, 2)
  minStockLevel         Decimal?               @db.Decimal(10, 2)
  price                 Decimal                @db.Decimal(15, 2)
  reorderLevel          Decimal?               @db.Decimal(10, 2)
  sku                   String                 @unique
  weight                Decimal?               @db.Decimal(10, 3)
  inventory             Inventory[]
  inventoryTransactions InventoryTransaction[]
  invoiceItems          InvoiceItem[]
  priceListItems        PriceListItem[]
  category              ProductCategory?       @relation(fields: [categoryId], references: [id])
  attributes            ProductAttribute[]
  warranties            Warranty[]
}

model ProductAttribute {
  id             Int      @id @default(autoincrement())
  productId      Int
  attributeName  String
  attributeValue String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model CustomerGroup {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  discountRate Decimal     @default(0) @db.Decimal(5, 2)
  creditLimit  Decimal?    @db.Decimal(15, 2)
  paymentTerms Int?
  priority     Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  customers    Customer[]
  priceLists   PriceList[]
}

model Customer {
  id           Int            @id @default(autoincrement())
  code         String?        @unique
  name         String
  phone        String?
  email        String?
  address      String?
  groupId      Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  group        CustomerGroup? @relation(fields: [groupId], references: [id])
  invoices     Invoice[]
  transactions Transaction[]
  warranties   Warranty[]
}

model Partner {
  id            Int           @id @default(autoincrement())
  code          String?       @unique
  name          String
  contactPerson String?
  phone         String?
  email         String?
  address       String?
  taxCode       String?
  paymentTerms  Int?
  creditBalance Decimal       @default(0) @db.Decimal(15, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]
}

model Shift {
  id           Int           @id @default(autoincrement())
  userId       Int
  warehouseId  Int
  startTime    DateTime
  endTime      DateTime?
  startAmount  Decimal       @db.Decimal(15, 2)
  endAmount    Decimal?      @db.Decimal(15, 2)
  status       String        @default("open")
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoices     Invoice[]
  user         User          @relation(fields: [userId], references: [id])
  warehouse    Warehouse     @relation(fields: [warehouseId], references: [id])
  transactions Transaction[]
}

model Inventory {
  id            Int                @id @default(autoincrement())
  productId     Int
  warehouseId   Int
  locationId    Int?
  quantity      Decimal            @default(0) @db.Decimal(10, 2)
  minStockLevel Decimal            @default(0) @db.Decimal(10, 2)
  maxStockLevel Decimal?           @db.Decimal(10, 2)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  location      WarehouseLocation? @relation(fields: [locationId], references: [id])
  product       Product            @relation(fields: [productId], references: [id])
  warehouse     Warehouse          @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId, locationId])
  @@index([warehouseId])
  @@index([productId])
}

model InventoryTransaction {
  id              Int                @id @default(autoincrement())
  productId       Int
  warehouseId     Int
  locationId      Int?
  transactionType String
  quantity        Decimal            @db.Decimal(10, 2)
  referenceType   String?
  referenceId     Int?
  userId          Int?
  notes           String?
  createdAt       DateTime           @default(now())
  location        WarehouseLocation? @relation(fields: [locationId], references: [id])
  product         Product            @relation(fields: [productId], references: [id])
  user            User?              @relation(fields: [userId], references: [id])
  warehouse       Warehouse          @relation(fields: [warehouseId], references: [id])

  @@index([productId])
  @@index([warehouseId])
  @@index([referenceType, referenceId])
}

model Invoice {
  id             Int              @id @default(autoincrement())
  code           String           @unique
  customerId     Int?
  userId         Int
  shiftId        Int?
  warehouseId    Int
  invoiceDate    DateTime         @default(now())
  subtotal       Decimal          @db.Decimal(15, 2)
  taxAmount      Decimal          @default(0) @db.Decimal(15, 2)
  discountAmount Decimal          @default(0) @db.Decimal(15, 2)
  totalAmount    Decimal          @db.Decimal(15, 2)
  paidAmount     Decimal          @default(0) @db.Decimal(15, 2)
  paymentMethod  String?
  status         String           @default("pending")
  notes          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  customer       Customer?        @relation(fields: [customerId], references: [id])
  shift          Shift?           @relation(fields: [shiftId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  warehouse      Warehouse        @relation(fields: [warehouseId], references: [id])
  items          InvoiceItem[]
  payments       InvoicePayment[]
  transactions   Transaction[]
  warranties     Warranty[]

  @@index([customerId])
  @@index([userId])
  @@index([shiftId])
  @@index([warehouseId])
}

model InvoiceItem {
  id                 Int                @id @default(autoincrement())
  invoiceId          Int
  productId          Int
  quantity           Decimal            @db.Decimal(10, 2)
  unitPrice          Decimal            @db.Decimal(15, 2)
  discountRate       Decimal            @default(0) @db.Decimal(5, 2)
  discountAmount     Decimal            @default(0) @db.Decimal(15, 2)
  taxRate            Decimal            @default(0) @db.Decimal(5, 2)
  taxAmount          Decimal            @default(0) @db.Decimal(15, 2)
  totalAmount        Decimal            @db.Decimal(15, 2)
  locationId         Int?
  serialNumbers      String?
  serialNumber       String?
  warrantyExpiration DateTime?
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  invoice            Invoice            @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  location           WarehouseLocation? @relation(fields: [locationId], references: [id])
  product            Product            @relation(fields: [productId], references: [id])

  @@index([invoiceId])
  @@index([productId])
  @@index([locationId])
}

model InvoicePayment {
  id              Int      @id @default(autoincrement())
  invoiceId       Int
  amount          Decimal  @db.Decimal(15, 2)
  paymentMethod   String
  referenceNumber String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  invoice         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model PriceList {
  id              Int             @id @default(autoincrement())
  name            String
  code            String          @unique
  description     String?
  customerGroupId Int
  startDate       DateTime?
  endDate         DateTime?
  priority        Int             @default(0)
  discountType    String          @default("percentage")
  status          String          @default("active")
  applicableOn    String          @default("all")
  isDefault       Boolean         @default(false)
  createdBy       Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  customerGroup   CustomerGroup   @relation(fields: [customerGroupId], references: [id])
  items           PriceListItem[]

  @@unique([customerGroupId, isDefault], name: "unique_price_list_default_per_customer_group")
  @@index([customerGroupId])
  @@index([status])
}

model PriceListItem {
  id                Int       @id @default(autoincrement())
  priceListId       Int
  productId         Int
  price             Decimal   @db.Decimal(15, 2)
  minQuantity       Decimal   @default(1) @db.Decimal(10, 2)
  maxQuantity       Decimal?  @db.Decimal(10, 2)
  discountType      String    @default("percentage")
  discountValue     Decimal   @default(0) @db.Decimal(10, 2)
  discountRate      Decimal   @default(0) @db.Decimal(5, 2)
  specialConditions String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  priceList         PriceList @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id])

  @@unique([priceListId, productId, minQuantity])
  @@index([productId])
  @@index([priceListId])
}

model Transaction {
  id                Int       @id @default(autoincrement())
  code              String    @unique
  transactionType   String
  transactionMethod String    @default("cash")
  amount            Decimal   @db.Decimal(15, 2)
  transactionDate   DateTime  @default(now())
  dueDate           DateTime?
  status            String    @default("completed")
  category          String?
  reference         String?
  customerId        Int?
  partnerId         Int?
  invoiceId         Int?
  referenceType     String?
  referenceId       Int?
  userId            Int
  shiftId           Int?
  paymentMethod     String?
  accountNumber     String?
  bankName          String?
  receiptNumber     String?
  attachments       String?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  customer          Customer? @relation(fields: [customerId], references: [id])
  invoice           Invoice?  @relation(fields: [invoiceId], references: [id])
  partner           Partner?  @relation(fields: [partnerId], references: [id])
  shift             Shift?    @relation(fields: [shiftId], references: [id])
  user              User      @relation(fields: [userId], references: [id])

  @@index([customerId])
  @@index([partnerId])
  @@index([invoiceId])
  @@index([userId])
  @@index([shiftId])
  @@index([transactionDate])
  @@index([status])
  @@index([category])
  @@index([referenceType, referenceId])
}

model Warranty {
  id                 Int       @id @default(autoincrement())
  code               String    @unique
  customerId         Int
  productId          Int
  invoiceId          Int?
  serialNumber       String?
  issueDescription   String?
  receivedDate       DateTime  @default(now())
  expectedReturnDate DateTime?
  actualReturnDate   DateTime?
  status             String    @default("pending")
  diagnosis          String?
  solution           String?
  cost               Decimal   @default(0) @db.Decimal(15, 2)
  charged            Boolean   @default(false)
  notes              String?
  creatorId          Int
  technicianId       Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  creator            User      @relation("WarrantyCreator", fields: [creatorId], references: [id])
  customer           Customer  @relation(fields: [customerId], references: [id])
  invoice            Invoice?  @relation(fields: [invoiceId], references: [id])
  product            Product   @relation(fields: [productId], references: [id])
  technician         User?     @relation("WarrantyTechnician", fields: [technicianId], references: [id])

  @@index([customerId])
  @@index([productId])
  @@index([invoiceId])
  @@index([serialNumber])
}

model ReportTemplate {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  reportType    String
  queryTemplate String
  parameters    Json?
  createdById   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User     @relation(fields: [createdById], references: [id])
}

model InvoiceTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  content     String
  type        String
  isDefault   Boolean  @default(false)
  createdById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model FacebookUser {
  id             String                @id
  email          String?
  name           String?
  profilePicture String?
  accessToken    String
  refreshToken   String?
  tokenExpiresAt DateTime?
  scopes         String[]
  isActive       Boolean               @default(true)
  userId         Int                   @unique
  connectedAt    DateTime              @default(now())
  lastSyncAt     DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  activityLogs   FacebookActivityLog[]
  pages          FacebookPage[]
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("facebook_users")
}

model FacebookPage {
  id             String                @id
  facebookPageId String                @unique
  name           String
  category       String?
  profilePicture String?
  pictureUrl     String?
  coverPhoto     String?
  about          String?
  website        String?
  phone          String?
  email          String?
  fanCount       Int                   @default(0)
  accessToken    String
  permissions    String[]
  isConnected    Boolean               @default(true)
  isActive       Boolean               @default(true)
  settings       Json?
  facebookUserId String
  connectedAt    DateTime              @default(now())
  lastSyncAt     DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  activityLogs   FacebookActivityLog[]
  comments       FacebookComment[]
  messages       FacebookMessage[]
  facebookUser   FacebookUser          @relation(fields: [facebookUserId], references: [id], onDelete: Cascade)

  @@map("facebook_pages")
}

model FacebookMessage {
  id                String            @id
  facebookMessageId String?
  facebookPageId    String
  conversationId    String
  fromId            String
  fromName          String
  fromEmail         String?
  message           String
  content           String?
  messageType       MessageType       @default(TEXT)
  type              MessageType       @default(TEXT)
  attachments       Json?
  isFromPage        Boolean           @default(false)
  isRead            Boolean           @default(false)
  readAt            DateTime?
  replyToId         String?
  pageId            String
  status            MessageStatus     @default(PENDING)
  processedAt       DateTime?
  processedBy       Int?
  sentAt            DateTime
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  page              FacebookPage      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  processor         User?             @relation(fields: [processedBy], references: [id])
  replyTo           FacebookMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies           FacebookMessage[] @relation("MessageReplies")

  @@index([pageId, sentAt])
  @@index([conversationId])
  @@index([status])
  @@map("facebook_messages")
}

model FacebookComment {
  id                String            @id
  facebookCommentId String            @unique
  facebookPageId    String
  postId            String
  fromId            String
  fromName          String
  message           String
  content           String?
  attachmentType    String?
  attachmentUrl     String?
  isHidden          Boolean           @default(false)
  canRemove         Boolean           @default(false)
  canHide           Boolean           @default(false)
  canReply          Boolean           @default(true)
  hasReply          Boolean           @default(false)
  parentId          String?
  parentCommentId   String?
  pageId            String
  status            CommentStatus     @default(PENDING)
  type              CommentType       @default(COMMENT)
  processedAt       DateTime?
  processedBy       Int?
  replyText         String?
  repliedAt         DateTime?
  hiddenAt          DateTime?
  deletedAt         DateTime?
  approvedAt        DateTime?
  likeCount         Int               @default(0)
  createdTime       DateTime
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  page              FacebookPage      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parent            FacebookComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies           FacebookComment[] @relation("CommentReplies")
  processor         User?             @relation(fields: [processedBy], references: [id])

  @@index([pageId, createdTime])
  @@index([postId])
  @@index([status])
  @@map("facebook_comments")
}

model FacebookActivityLog {
  id             Int           @id @default(autoincrement())
  action         String
  entityType     String
  entityId       String?
  facebookUserId String?
  pageId         String?
  systemUserId   Int?
  details        Json?
  ipAddress      String?
  userAgent      String?
  status         String        @default("success")
  errorMessage   String?
  createdAt      DateTime      @default(now())
  facebookUser   FacebookUser? @relation(fields: [facebookUserId], references: [id])
  page           FacebookPage? @relation(fields: [pageId], references: [id])
  systemUser     User?         @relation(fields: [systemUserId], references: [id])

  @@index([facebookUserId, createdAt])
  @@index([pageId, createdAt])
  @@index([action, createdAt])
  @@map("facebook_activity_logs")
}

enum CommentStatus {
  PENDING
  REPLIED
  HIDDEN
  DELETED
  IGNORED
  APPROVED
  PUBLISHED
}

enum CommentType {
  COMMENT
  REPLY
  MENTION
  REVIEW
}

enum MessageStatus {
  PENDING
  READ
  UNREAD
  REPLIED
  ARCHIVED
  PROCESSED
  SENT
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  STICKER
  REACTION
  SENT
  RECEIVED
}
