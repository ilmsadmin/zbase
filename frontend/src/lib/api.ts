import axios from 'axios';
import { getCookie, setCookie } from '@/utils/cookies';

// T·∫°o m·ªôt instance c·ªßa axios v·ªõi c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Th√™m interceptor request
api.interceptors.request.use(
  (config) => {
    // Th√™m token x√°c th·ª±c v√†o header n·∫øu c√≥ - ki·ªÉm tra c·∫£ localStorage, sessionStorage v√† cookies
    const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token') || getCookie('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log(`üîç [API] Request to ${config.method?.toUpperCase()} ${config.url} with token: ${token?.substring(0, 20)}...`);
    } else {
      console.log(`üîç [API] Request to ${config.method?.toUpperCase()} ${config.url} WITHOUT token`);
    }
    return config;
  },
  (error) => {
    console.error('‚ùå [API] Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Th√™m interceptor response
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ [API] Response from ${response.config.method?.toUpperCase()} ${response.config.url}: ${response.status} ${response.statusText}`);
    return response;
  },
  async (error) => {
    console.error(`‚ùå [API] Response error from ${error.config?.method?.toUpperCase()} ${error.config?.url}:`, {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data
    });
    
    const originalRequest = error.config;

    // X·ª≠ l√Ω l·ªói 401 (Unauthorized)
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;      try {
        // Th·ª≠ refresh token - ki·ªÉm tra c·∫£ localStorage v√† sessionStorage
        const refreshToken = localStorage.getItem('refresh_token') || sessionStorage.getItem('refresh_token');
        if (refreshToken) {
          const response = await axios.post(
            `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api'}/auth/refresh`,
            { refreshToken }
          );
          
          const { token } = response.data;
          
          // L∆∞u token v√†o ƒë√∫ng storage m√† ng∆∞·ªùi d√πng ƒë√£ d√πng tr∆∞·ªõc ƒë√≥
          if (localStorage.getItem('refresh_token')) {
            localStorage.setItem('auth_token', token);
          } else {
            sessionStorage.setItem('auth_token', token);
          }
          
          // Also update the cookie
          setCookie('auth_token', token);
          
          // Th·ª±c hi·ªán l·∫°i request v·ªõi token m·ªõi
          originalRequest.headers.Authorization = `Bearer ${token}`;
          return axios(originalRequest);
        }
      }catch (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        error
      ) {        // N·∫øu refresh token th·∫•t b·∫°i, x√≥a token t·ª´ c·∫£ localStorage v√† sessionStorage
        localStorage.removeItem('auth_token');
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('user');
        sessionStorage.removeItem('auth_token');
        sessionStorage.removeItem('refresh_token');
        sessionStorage.removeItem('user');
        
        if (typeof window !== 'undefined') {
          window.location.href = '/login';
        }
      }
    }
    
    return Promise.reject(error);
  }
);

export default api;
