"use client";

import { useState, useEffect, useMemo } from "react";
import { useReport } from "@/components/contexts/ReportContext";
import { useTranslations } from "next-intl";
import AdminLayout from "@/components/layouts/AdminLayout";
import { 
  FiDownload, FiRefreshCw, FiFilter, FiCalendar, 
  FiPieChart, FiBarChart2, FiGrid, FiList, FiShare2, 
  FiSave, FiPlus, FiAlertTriangle, FiChevronDown
} from "react-icons/fi";
import { 
  ReportType, ReportFormat, ReportFrequency,
  Report, reportService, SalesReportParams
} from "@/lib/api/services/report";
import { DateRangePicker } from "@/components/ui/DateRangePicker";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/Card";
import { Button } from "@/components/ui/Button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/Tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/Select";
import { Loading } from "@/components/ui/Loading";
import { formatCurrency, formatDate, formatDateTime } from "@/lib/utils/format";

// Chart components
import { BarChart, LineChart, PieChart } from "@/components/ui/charts";
import { DataTable, Column } from "@/components/ui/Table/DataTable";

export default function SalesReportsPage() {
  const t = useTranslations("admin.reports");
  
  // Use the Report context
  const { 
    loading, 
    error: reportError,
    reportData,
    recentReports,
    fetchReportData,
    fetchRecentReports,
    generateReport,
    downloadReport,
    shareReport,
    optimizedChartData
  } = useReport();
  
  // State for date range
  const [dateRange, setDateRange] = useState<{
    from: Date;
    to: Date;
  }>({
    from: new Date(new Date().setDate(new Date().getDate() - 30)),
    to: new Date(),
  });
  
  // State for group by
  const [groupBy, setGroupBy] = useState<'day' | 'week' | 'month'>('day');
  
  // State for view mode
  const [viewMode, setViewMode] = useState<'chart' | 'table'>('chart');
  
  // State for chart type
  const [chartType, setChartType] = useState<'bar' | 'line' | 'pie'>('bar');

  // Fetch report data on date range or group by change
  useEffect(() => {
    // Fetch recent sales reports when component mounts
    fetchRecentReports(ReportType.SALES);
  }, [fetchRecentReports]);

  // Handle fetch report data
  const handleFetchReportData = async () => {
    const params: SalesReportParams = {
      startDate: dateRange.from.toISOString(),
      endDate: dateRange.to.toISOString(),
      groupBy: groupBy,
    };
    
    await fetchReportData(ReportType.SALES, params);
  };

  // Handle generate report
  const handleGenerateReport = async (format: ReportFormat) => {
    const params: SalesReportParams = {
      startDate: dateRange.from.toISOString(),
      endDate: dateRange.to.toISOString(),
      groupBy: groupBy,
    };
    
    const reportDataObj = {
      name: `Sales Report - ${formatDate(dateRange.from)} to ${formatDate(dateRange.to)}`,
      description: `Sales report grouped by ${groupBy}`,
      type: ReportType.SALES,
      format: format,
      parameters: params,
      frequency: ReportFrequency.ONCE,
    };
    
    await generateReport(reportDataObj);
  };

  // Get optimized chart data for visualization
  const getOptimizedChartData = (data: any[] | undefined, type: 'bar' | 'line' | 'pie') => {
    if (!data) return [];
    
    if (type === 'pie') {
      return optimizedChartData.categorical(data, 10);
    } 
    
    return optimizedChartData.timeSeries(data, 50);
  };
  
  // Table columns for sales data
  const salesColumns: Column<any>[] = [
    {
      key: 'date',
      header: t('date'),
      render: (row) => <span>{formatDate(row.date)}</span>,
      sortable: true,
    },
    {
      key: 'totalSales',
      header: t('totalSales'),
      render: (row) => <span>{formatCurrency(row.totalSales)}</span>,
      sortable: true,
      align: 'right',
    },
    {
      key: 'invoiceCount',
      header: t('invoiceCount'),
      render: (row) => <span>{row.invoiceCount}</span>,
      sortable: true,
      align: 'right',
    },
    {
      key: 'averageSale',
      header: t('averageSale'),
      render: (row) => <span>{formatCurrency(row.averageSale)}</span>,
      sortable: true,
      align: 'right',
    },
    {
      key: 'costOfGoodsSold',
      header: t('costOfGoodsSold'),
      render: (row) => <span>{formatCurrency(row.costOfGoodsSold)}</span>,
      sortable: true,
      align: 'right',
    },
    {
      key: 'grossProfit',
      header: t('grossProfit'),
      render: (row) => <span>{formatCurrency(row.grossProfit)}</span>,
      sortable: true,
      align: 'right',
    },
    {
      key: 'grossMargin',
      header: t('grossMargin'),
      render: (row) => <span>{row.grossMargin}%</span>,
      sortable: true,
      align: 'right',
    },
  ];
  
  // Recent reports columns
  const recentReportsColumns: Column<Report>[] = [
    {
      key: 'name',
      header: t('reportName'),
      render: (row) => <span>{row.name}</span>,
      sortable: true,
    },
    {
      key: 'format',
      header: t('format'),
      render: (row) => <span className="uppercase">{row.format}</span>,
      sortable: true,
    },
    {
      key: 'createdAt',
      header: t('createdAt'),
      render: (row) => <span>{formatDateTime(row.createdAt)}</span>,
      sortable: true,
    },
    {
      key: 'actions',
      header: t('actions'),
      render: (row) => (
        <div className="flex space-x-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => downloadReport(row.id, row.format)}
            disabled={!row.fileUrl}
          >
            <FiDownload className="mr-1" /> {t('download')}
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              const url = shareReport(row.id, { expiry: '7d' });
              // Copy to clipboard
              navigator.clipboard.writeText(url);
              alert(t('linkCopiedToClipboard'));
            }}
            disabled={!row.fileUrl}
          >
            <FiShare2 className="mr-1" /> {t('share')}
          </Button>
        </div>
      ),
      align: 'right',
    },
  ];

  return (
    <div className="container mx-auto px-4">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-800 mb-2">{t('salesReports')}</h1>
        <p className="text-gray-600">{t('salesReportsDescription')}</p>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle>{t('totalSales')}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">
              {reportData ? formatCurrency(reportData.summary?.totalSales || 0) : '-'}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle>{t('totalInvoices')}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">
              {reportData ? reportData.summary?.invoiceCount || 0 : '-'}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-2">
            <CardTitle>{t('grossProfit')}</CardTitle>
          </CardHeader>
          <CardContent className="flex items-center">
            <div className="text-3xl font-bold">
              {reportData ? formatCurrency(reportData.summary?.grossProfit || 0) : '-'}
            </div>
          </CardContent>
        </Card>
      </div>
      
      <Card className="mb-8">
        <CardHeader>
          <div className="flex flex-col md:flex-row md:justify-between md:items-center space-y-2 md:space-y-0">
            <CardTitle>{t('salesAnalysis')}</CardTitle>
          </div>
        </CardHeader>
        
        <CardContent>
          <div className="mb-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {t('dateRange')}
              </label>
              <DateRangePicker
                value={dateRange}
                onChange={setDateRange}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {t('groupBy')}
              </label>
              <Select 
                value={groupBy} 
                onValueChange={(value) => setGroupBy(value as 'day' | 'week' | 'month')}
              >
                <SelectTrigger>
                  <SelectValue placeholder={t('selectGrouping')} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="day">{t('day')}</SelectItem>
                  <SelectItem value="week">{t('week')}</SelectItem>
                  <SelectItem value="month">{t('month')}</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-end">
              <Button onClick={handleFetchReportData} className="w-full">
                <FiRefreshCw className="mr-2" />
                {t('updateReport')}
              </Button>
            </div>
          </div>
          
          <div className="flex justify-end mb-4">
            <div className="flex gap-2">
              <Button
                variant={viewMode === 'chart' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setViewMode('chart')}
              >
                <FiBarChart2 className="mr-1" /> {t('chart')}
              </Button>
              <Button
                variant={viewMode === 'table' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setViewMode('table')}
              >
                <FiList className="mr-1" /> {t('table')}
              </Button>
            </div>
          </div>
          
          {viewMode === 'chart' && (
            <div>
              <div className="mb-4 flex justify-center">
                <div className="inline-flex rounded-md shadow-sm" role="group">
                  <button
                    type="button"
                    onClick={() => setChartType('bar')}
                    className={`px-4 py-2 text-sm font-medium ${
                      chartType === 'bar'
                        ? 'bg-primary text-white'
                        : 'bg-white text-gray-700 hover:bg-gray-100'
                    } border border-gray-200 rounded-l-lg`}
                  >
                    <FiBarChart2 className="inline mr-1" /> {t('bar')}
                  </button>
                  <button
                    type="button"
                    onClick={() => setChartType('line')}
                    className={`px-4 py-2 text-sm font-medium ${
                      chartType === 'line'
                        ? 'bg-primary text-white'
                        : 'bg-white text-gray-700 hover:bg-gray-100'
                    } border-t border-b border-gray-200`}
                  >
                    <FiBarChart2 className="inline mr-1" /> {t('line')}
                  </button>
                  <button
                    type="button"
                    onClick={() => setChartType('pie')}
                    className={`px-4 py-2 text-sm font-medium ${
                      chartType === 'pie'
                        ? 'bg-primary text-white'
                        : 'bg-white text-gray-700 hover:bg-gray-100'
                    } border border-gray-200 rounded-r-lg`}
                  >
                    <FiPieChart className="inline mr-1" /> {t('pie')}
                  </button>
                </div>
              </div>
              
              <div className="h-80">
                {loading ? (
                  <div className="h-full flex items-center justify-center">
                    <Loading />
                  </div>
                ) : reportData?.data ? (
                  <>
                    {chartType === 'bar' && (
                      <BarChart 
                        data={getOptimizedChartData(reportData.data, 'bar')}
                        xKey="date"
                        yKeys={[
                          { key: "totalSales", name: t("totalSales") },
                          { key: "grossProfit", name: t("grossProfit") }
                        ]}
                      />
                    )}
                    {chartType === 'line' && (
                      <LineChart 
                        data={getOptimizedChartData(reportData.data, 'line')}
                        xKey="date"
                        yKeys={[
                          { key: "totalSales", name: t("totalSales") },
                          { key: "grossProfit", name: t("grossProfit") }
                        ]}
                      />
                    )}
                    {chartType === 'pie' && (
                      <PieChart 
                        data={getOptimizedChartData(reportData.data, 'pie').map((item: any) => ({
                          name: formatDate(item.date),
                          value: item.totalSales
                        }))}
                      />
                    )}
                    
                    {reportData.data.length > 50 && (
                      <div className="mt-2 text-center text-xs text-gray-500">
                        <FiAlertTriangle className="inline mr-1 text-amber-500" />
                        {t('chartOptimizationNotice')}
                      </div>
                    )}
                  </>
                ) : (
                  <div className="h-full flex flex-col items-center justify-center text-gray-500">
                    <FiBarChart2 size={48} />
                    <p className="mt-2">{t('noReportData')}</p>
                  </div>
                )}
              </div>
            </div>
          )}
          
          {viewMode === 'table' && (
            <div>
              {loading ? (
                <div className="h-80 flex items-center justify-center">
                  <Loading />
                </div>
              ) : reportData?.data ? (
                <DataTable
                  columns={salesColumns}
                  data={reportData.data || []}
                  pagination
                  initialPageSize={10}
                />
              ) : (
                <div className="h-80 flex flex-col items-center justify-center text-gray-500">
                  <FiGrid size={48} />
                  <p className="mt-2">{t('noReportData')}</p>
                </div>
              )}
            </div>
          )}
        </CardContent>
        
        <CardFooter className="flex flex-wrap justify-between gap-2">
          <div>
            {reportError && (
              <div className="text-red-500 text-sm flex items-center">
                <FiAlertTriangle className="mr-1" />
                {reportError}
              </div>
            )}
          </div>
          
          <div className="flex gap-2">
            <div className="dropdown relative inline-block">
              <Button variant="outline">
                <FiDownload className="mr-2" />
                {t('download')}
                <FiChevronDown className="ml-2" />
              </Button>
              <div className="dropdown-menu shadow-md rounded-md bg-white p-2 mt-1 absolute right-0 hidden hover:block z-50">
                <Button 
                  variant="ghost"
                  className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100 rounded"
                  onClick={() => handleGenerateReport(ReportFormat.PDF)}
                >
                  PDF
                </Button>
                <Button 
                  variant="ghost"
                  className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100 rounded"
                  onClick={() => handleGenerateReport(ReportFormat.EXCEL)}
                >
                  Excel
                </Button>
                <Button 
                  variant="ghost"
                  className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100 rounded"
                  onClick={() => handleGenerateReport(ReportFormat.CSV)}
                >
                  CSV
                </Button>
              </div>
            </div>
            
            <Button>
              <FiShare2 className="mr-2" />
              {t('share')}
            </Button>
            
            <Button>
              <FiSave className="mr-2" />
              {t('saveAsTemplate')}
            </Button>
          </div>
        </CardFooter>
      </Card>
      
      {/* Recent reports */}
      <div className="mb-8">
        <h2 className="text-xl font-bold text-gray-800 mb-4">{t('recentReports')}</h2>
        
        <Card>
          <CardContent className="p-0">
            {recentReports.length > 0 ? (
              <DataTable
                columns={recentReportsColumns}
                data={recentReports}
                pagination
                initialPageSize={5}
              />
            ) : (
              <div className="h-40 flex items-center justify-center text-gray-500">
                {loading ? <Loading /> : <p>{t('noRecentReports')}</p>}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
